package com.goldenasia.lottery.pattern;

import android.app.Activity;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.goldenasia.lottery.R;
import com.goldenasia.lottery.base.net.RestCallback;
import com.goldenasia.lottery.base.net.RestRequest;
import com.goldenasia.lottery.base.net.RestRequestManager;
import com.goldenasia.lottery.base.net.RestResponse;
import com.goldenasia.lottery.component.CountdownView;
import com.goldenasia.lottery.component.CustomDialog;
import com.goldenasia.lottery.data.IssueInfo;
import com.goldenasia.lottery.data.IssueInfoCommand;
import com.goldenasia.lottery.data.IssueLastCommand;
import com.goldenasia.lottery.data.LastIssueInfo;
import com.goldenasia.lottery.data.Lottery;
import com.goldenasia.lottery.game.PromptManager;
import com.goldenasia.lottery.material.ConstantInformation;
import com.goldenasia.lottery.material.PeriodInfo;
import com.goldenasia.lottery.util.UiUtils;
import com.google.gson.reflect.TypeToken;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import static com.goldenasia.lottery.material.ConstantInformation.ONE_DAY;
import static com.goldenasia.lottery.material.ConstantInformation.ONE_HOUR;
import static com.goldenasia.lottery.material.ConstantInformation.ONE_MINUTE;
import static com.goldenasia.lottery.material.ConstantInformation.ONE_SECOND;

/**
 * 开奖与销售 倒计时
 * 4.4.7	获取奖期信息
 * Created by ACE-PC on 2016/1/18.
 */
public class TitleTimingView {
    private String Tag = TitleTimingView.class.getSimpleName();
    private final long TRACK_INTERVAL_SHORT = 8;
    private final long TRACK_INTERVAL_LONG = 50;
    /*获取当前奖期*/
    private static final int ISSUE_TRACE_ID = 2;
    /*获取上期奖期*/
    private static final int OPEN_ISSUE_TRACE_ID = 3;
    private static final long RETRY_INTERVAL = 15 * ONE_SECOND;

    private Activity activity;
    private View view;
    private TextView agoIssueTextView;
    private TextView openCodeTextView;
    private TextView salesIssueView;
    private CountdownView salesTimeView;
    private LinearLayout mLlAwardSdlklpu;
    private ImageView mImageSdlklpu01;
    private TextView mTextSdlklpu01;
    private ImageView mImageSdlklpu02;
    private TextView mTextSdlklpu02;
    private ImageView mImageSdlklpu03;
    private TextView mTextSdlklpu03;
    private LinearLayout ll_award_bjkl8;
    private TextView timing_title_opennumber01;
    private TextView timing_title_opennumber02;

    private boolean isSelling;
    private Lottery lottery;
    private String issue;
    private String issueLast;
    private LastIssueInfo lastIssueInfo;
    private PeriodInfo periodInfo;
    private DateFormat df = new SimpleDateFormat("yyyyMMdd");

    private OnUpdateListener onUpdateListener;

//    private Handler getLastHandler;
//    private Handler getCurHandler;
//    private Runnable getLastRunnable;
//    private Runnable getCurRunnable;

    /**
     * 带Context的构造器
     *
     * @param view
     */

    public TitleTimingView(Activity activity, View view, Lottery lottery) {
        this.view = view;
        this.activity = activity;
        this.lottery = lottery;
        init();
    }

    public TitleTimingView(LayoutInflater inflater, int id) {
        this.view = inflater.inflate(id, null);
        init();
    }

    private Lottery getLottery() {
        return lottery;
    }

    public void setLottery(Lottery lottery) {
        this.lottery = lottery;
    }

    public PeriodInfo getPeriodInfo() {
        return periodInfo;
    }

    public void setPeriodInfo(PeriodInfo periodInfo) {
        this.periodInfo = periodInfo;
    }

    public LastIssueInfo getLastIssueInfo() {
        return lastIssueInfo;
    }

    public void setLastIssueInfo(LastIssueInfo lastIssueInfo) {
        this.lastIssueInfo = lastIssueInfo;
    }

    public String getIssueLast() {
        return issueLast;
    }

    public void setIssueLast(String issueLast) {
        this.issueLast = issueLast;
    }

    public String getIssue() {
        return issue;
    }

    public void setIssue(String issue) {
        this.issue = issue;
    }

    public void setOnUpdateListener(OnUpdateListener onUpdateListener) {
        this.onUpdateListener = onUpdateListener;
    }

    private void init() {

        agoIssueTextView = view.findViewById(R.id.timing_title_agoissue);
        openCodeTextView = view.findViewById(R.id.timing_title_opennumber);
        salesIssueView = view.findViewById(R.id.timing_title_salesissue);
        salesTimeView = view.findViewById(R.id.timing_title_salestime);
        mLlAwardSdlklpu = view.findViewById(R.id.ll_award_sdlklpu);
        mImageSdlklpu01 = view.findViewById(R.id.image_sdlklpu01);
        mTextSdlklpu01 = view.findViewById(R.id.text_sdlklpu01);
        mImageSdlklpu02 = view.findViewById(R.id.image_sdlklpu02);
        mTextSdlklpu02 = view.findViewById(R.id.text_sdlklpu02);
        mImageSdlklpu03 = view.findViewById(R.id.image_sdlklpu03);
        mTextSdlklpu03 = view.findViewById(R.id.text_sdlklpu03);
        ll_award_bjkl8 = view.findViewById(R.id.ll_award_bjkl8);
        timing_title_opennumber01 = view.findViewById(R.id.timing_title_opennumber01);
        timing_title_opennumber02 = view.findViewById(R.id.timing_title_opennumber02);

        isSelling = true;
        issue = "";
        issueLast = "";

        /*getCurHandler = new Handler();
        getCurRunnable = new Runnable() {
            @Override
            public void run() {
                getSalesInfo();
            }
        };*/

        /*getLastHandler = new Handler();
        getLastRunnable = new Runnable() {
            @Override
            public void run() {
                getCode();
                getLastHandler.removeCallbacks(this);
            }
        };*/

        setListener();
        //salesTimeView.start((long) 0);
        getAwardPeriod();
    }

    /**
     * 设置监听
     */
    private void setListener() {
        salesTimeView.setOnCountdownEndListener((cv) -> {
            //当销售结束后 开启开奖倒计时
            if (isSelling) {
                waitForOpenLottery(getInterval());
            } else {
                getSalesInfo();
            }
        });
    }

    public void stop() {
        if (salesTimeView != null)
            salesTimeView.stop();
        closeRequest();
    }

    /**
     * 初使化开奖与销售信息
     * @param periodInfo
     */
    public void initLotteryInfoHead(PeriodInfo periodInfo) {
        if (periodInfo != null)
            setSalesLottery(periodInfo);
        else
            setSalesLottery(new PeriodInfo());
    }

    private void setSalesLottery(PeriodInfo periodInfo) {
        updateSalesInfo(periodInfo);
        updateSalesLottery(periodInfo.getOpenIssue(), periodInfo.getOpenCode());
    }

    private void updateSalesInfo(PeriodInfo periodInfo) {
        int daySales = 0, hourSales = 0, minuteSales = 0, secondSales = 0;
        if (periodInfo.getSalesTime() != null) {
            isSelling = true;
            daySales = periodInfo.getSalesTime().getDay() > 0 ? periodInfo.getSalesTime().getDay() : 0;
            hourSales = periodInfo.getSalesTime().getHour() > 0 ? periodInfo.getSalesTime().getHour() : 0;
            minuteSales = periodInfo.getSalesTime().getMinute() > 0 ? periodInfo.getSalesTime().getMinute() : 0;
            secondSales = periodInfo.getSalesTime().getSecond() > 0 ? periodInfo.getSalesTime().getSecond() : 0;
            Log.e("peri", "day:" + daySales + ",hour:" + hourSales + ",minute:" + minuteSales + ",second:" +secondSales);
        }
        Date curDate = new Date(System.currentTimeMillis());
        salesTimeView.start(daySales * ONE_DAY + hourSales * ONE_HOUR + minuteSales * ONE_MINUTE + secondSales * ONE_SECOND);
        salesIssueView.setText(periodInfo.getSalesIssue() != null && periodInfo.getSalesIssue().length() > 0 ? periodInfo.getSalesIssue() : df.format(curDate) + "-" + "****期");
    }

    //更新开奖号码
    private void updateSalesLottery(String openIssue, String codeOpen) {
        Date curDate = new Date(System.currentTimeMillis());
        agoIssueTextView.setText(openIssue != null && openIssue.length() > 0 ? openIssue : df.format(curDate) + "-" +"****期");
        if (lottery != null && lottery.getLotteryId() == 14) {//14://山东快乐扑克
            openCodeTextView.setVisibility(View.GONE);
            mLlAwardSdlklpu.setVisibility(View.VISIBLE);
            showSsklpuAwardCode(codeOpen);
        } else if (lottery.getLotteryId() == 48) {
//            openCodeTextView.setVisibility(View.VISIBLE);
//            mLlAwardSdlklpu.setVisibility(View.GONE);
            //codeOpen = "01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20";
            if (codeOpen == null || codeOpen.length() == 0) {
                showSingleLine("-\t-\t-\t-\t-");
            } else {
                if (codeOpen.length() > 30) {
                    showDoudleLine(codeOpen.substring(0, 29), codeOpen.substring(30, codeOpen.length()));
                } else {
                    showSingleLine(codeOpen);
                }
            }
        } else {
//            openCodeTextView.setVisibility(View.VISIBLE);
//            mLlAwardSdlklpu.setVisibility(View.GONE);
            if (codeOpen != null && codeOpen.length() > 0) {
//                ConstantInformation.HISTORY_CODE_MAP.put(openIssue,codeOpen);
//                Log.e(Tag, /*"HISTORY_CODE_MAP:" +  ConstantInformation.HISTORY_CODE_MAP+",openIssue="+openIssue+",codeOpen="+codeOpen+*/" ConstantInformation.HISTORY_CODE_MAP"+ConstantInformation.HISTORY_CODE_MAP.size());
            }
            LoadWinHistory();
            showSingleLine(codeOpen != null && codeOpen.length() > 0 ? codeOpen : "-\t-\t-\t-\t-");
        }

        getIntervalTimer(getInterval(),TextUtils.isEmpty(codeOpen));

        //用于更新 开奖后 需要更新的数据
        if (onUpdateListener != null && codeOpen != null && codeOpen.length() > 0) {
            onUpdateListener.onUpdate();
        }
    }

    //显示一行的
    private void showSingleLine(String title) {
        openCodeTextView.setVisibility(View.VISIBLE);
        ll_award_bjkl8.setVisibility(View.GONE);
        mLlAwardSdlklpu.setVisibility(View.GONE);

        openCodeTextView.setText(title);
    }

    //显示2行的
    private void showDoudleLine(String title1, String title2) {
        openCodeTextView.setVisibility(View.GONE);
        ll_award_bjkl8.setVisibility(View.VISIBLE);
        mLlAwardSdlklpu.setVisibility(View.GONE);

        timing_title_opennumber01.setText(title1);
        timing_title_opennumber02.setText(title1);
    }

    //显示快乐扑克开奖信息 （文字+图片形式）
    private void showSsklpuAwardCode(String codeOpen) {
        if (codeOpen != null && codeOpen.length() > 0) {
      /*      StringBuffer sb1;
           char c= sb1.charAt(1);*/
            mTextSdlklpu01.setText((codeOpen.charAt(0) + "").replace("T", "10"));
            mTextSdlklpu02.setText((codeOpen.charAt(3) + "").replace("T", "10"));
            mTextSdlklpu03.setText((codeOpen.charAt(6) + "").replace("T", "10"));

            //图片
            mImageSdlklpu01.setImageDrawable(letterToDrawable(codeOpen.charAt(1) + ""));
            mImageSdlklpu02.setImageDrawable(letterToDrawable(codeOpen.charAt(4) + ""));
            mImageSdlklpu03.setImageDrawable(letterToDrawable(codeOpen.charAt(7) + ""));
        } else {
            mTextSdlklpu01.setText("");
            mTextSdlklpu02.setText("-\t-\t-\t-\t-");
            mTextSdlklpu03.setText("");

            //图片
            mImageSdlklpu01.setImageDrawable(null);
            mImageSdlklpu02.setImageDrawable(null);
            mImageSdlklpu03.setImageDrawable(null);
        }
    }

    //根据字母判定花色  花色♠s,♥h ♣c ♦d(一律小写)
    private Drawable letterToDrawable(String letter) {
        if ("s".equals(letter)) {
            return UiUtils.getDrawable(activity, R.drawable.ht_icon);
        } else if ("h".equals(letter)) {
            return UiUtils.getDrawable(activity, R.drawable.hongt_icon);
        } else if ("c".equals(letter)) {
            return UiUtils.getDrawable(activity, R.drawable.mh_icon);
        } else if ("d".equals(letter)) {
            return UiUtils.getDrawable(activity, R.drawable.fk_icon);
        } else {
            return null;
        }
    }

    //销售完成后 等待触发 拉取 －> 开奖号与销售
    private void waitForOpenLottery(long second) {
        isSelling = false;
        salesTimeView.start((long) 0 * ONE_HOUR + 0 * ONE_MINUTE + second);
    }

    //获取销售
    private void getSalesInfo() {
        getAwardPeriod();
        if (periodInfo != null) {
            updateSalesInfo(periodInfo);
        } else
            salesTimeView.stop();
    }

    /**
     * 获取号码
     */
    private void getCode() {
        updateOpenPeriod();
    }

    /**
     * 间隔获取 >0
     */
    private void getIntervalTimer(long interval,boolean status) {
        Log.e("间隔获取","------------>"+status);
        salesTimeView.setIntervalStatus(status);
        salesTimeView.setOnCountdownIntervalListener(interval, (cv, t) -> getCode());
    }

    private long getInterval() {
        long interval = 0;
        if (getLottery() != null) {
            /*switch (getLottery().getLotteryId())
            {
                case 11:
                case 13:
                case 15:
                case 16:
                case 19:
                case 25:
                case 26:
                case 50://北京5分彩
                    interval = TRACK_INTERVAL_SHORT * 1000;
                    break;
                default:
                    interval = TRACK_INTERVAL_LONG * 1000;
                    break;
            }*/
            interval = TRACK_INTERVAL_SHORT * 1000;
        }
        return interval;
    }

    /**
     * 加截信息  @param lottery
     * getCurIssue
     */
    private void getAwardPeriod() {
        IssueInfoCommand command = new IssueInfoCommand();
        command.setLotteryId(lottery.getLotteryId());
        command.setOp("getCurIssue");
        TypeToken typeToken = new TypeToken<RestResponse<IssueInfo>>() {
        };
        RestRequest restRequest = RestRequestManager.createRequest(activity, command, typeToken, restCallback, ISSUE_TRACE_ID, this);
        restRequest.execute();
    }

    /**
     * getLastIssueCode
     */
    private void updateOpenPeriod() {
        IssueLastCommand command = new IssueLastCommand();
        command.setLotteryId(lottery.getLotteryId());
        command.setOp("getLastIssueCode");
        command.setIssue(getIssueLast());
        TypeToken typeToken = new TypeToken<RestResponse<LastIssueInfo>>() {
        };
        RestRequest restRequest = RestRequestManager.createRequest(activity, command, typeToken, restCallback,OPEN_ISSUE_TRACE_ID, this);
        restRequest.execute();
    }

    /**
     * 解析奖期信息
     */
    private void updateIssueInfo(IssueInfo issueInfo) {
        PeriodInfo periodInfo = new PeriodInfo();
        if (issueInfo == null)
            setPeriodInfo(new PeriodInfo());
        else {
            int index = issueInfo.getServerTime().indexOf("/");
            String currenttime = index != -1 ? issueInfo.getServerTime().replaceAll("/", "-") : "";
            periodInfo.setSalesTime(ConstantInformation.getLasttime(currenttime, issueInfo.getIssueInfo().getEndtime()));
            periodInfo.setSalesIssue(issueInfo.getIssueInfo().getIssue());
            setIssue(issueInfo.getIssueInfo().getIssue());
            if (issueInfo.getLastIssueInfo() != null) {
                setIssueLast(issueInfo.getLastIssueInfo().getIssue());
                periodInfo.setOpenIssue(issueInfo.getLastIssueInfo().getIssue());
                periodInfo.setOpenCode(issueInfo.getLastIssueInfo().getCode());
            } else {
                periodInfo.setOpenIssue("");
                periodInfo.setOpenCode("");
            }
            setPeriodInfo(periodInfo);
        }
    }

    private RestCallback restCallback = new RestCallback() {
        @Override
        public boolean onRestComplete(RestRequest request, RestResponse response) {
            if (request.getId() == ISSUE_TRACE_ID) {
                updateIssueInfo((IssueInfo) response.getData());
                initLotteryInfoHead(getPeriodInfo());
            } else if (request.getId() == OPEN_ISSUE_TRACE_ID) {
                LastIssueInfo issueCode = (LastIssueInfo) response.getData();
                setLastIssueInfo(issueCode);
                if (getLastIssueInfo() != null) {
                    if (getLastIssueInfo().getIssueInfo() != null) {
                        updateSalesLottery(getLastIssueInfo().getIssueInfo().getIssue(), getLastIssueInfo().getIssueInfo().getCode());
                        /*if (TextUtils.isEmpty(lastCode))
                            getLastHandler.postDelayed(getLastRunnable, RETRY_INTERVAL);
                        else
                            getLastHandler.removeCallbacks(getLastRunnable);*/
                    }
                }
            }
            return true;
        }

        @Override
        public boolean onRestError(RestRequest request, int errCode, String errDesc) {
            if (errCode == 8002) {
                return true;
            } else if (errCode == 7003) {
                Toast.makeText(activity, "止奖期未开放销售", Toast.LENGTH_LONG).show();
                return true;
            } else if (errCode == 7006) {
                stop();
                CustomDialog dialog = PromptManager.showCustomDialog(activity, "重新登录", errDesc, "重新登录", errCode);
                dialog.setCancelable(false);
                dialog.show();
                return true;
            }
            return false;
        }

        @Override
        public void onRestStateChanged(RestRequest request, @RestRequest.RestState int state) {
        }
    };

    /**
     * 选中监听器
     */
    public interface OnUpdateListener {
        void onUpdate();
    }

    private void closeRequest() {
        RestRequestManager.cancelAll(this);
        /*if (getLastHandler != null)
            getLastHandler.removeCallbacks(getLastRunnable);
          if (getCurHandler != null)
            getCurHandler.removeCallbacks(getCurRunnable);*/
    }
}

