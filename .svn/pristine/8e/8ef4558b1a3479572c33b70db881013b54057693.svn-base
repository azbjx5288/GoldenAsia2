package com.goldenasia.lottery.view;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.support.v4.content.ContextCompat;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;

import com.goldenasia.lottery.R;
import com.goldenasia.lottery.util.DisplayUtil;

import java.util.List;


public class LuDanContentView extends View {
    private static final String TAG = LuDanContentView.class.getSimpleName();

    private TextPaint paint;
    private float itemHeight;
    private float itemWidth;
    private int textSize;
    private int horizontalGap;
    private int verticalGap;

    private Drawable drawable01;
    private Drawable drawable02;
    private Drawable drawable03;

    private List<List<String>> dataList;

    private String title = "万十路单";
    private int column = 0;
    private int width;

    private int lineWidth = 0;
    private int lineWidthInit = 0;

    private int showCount = 0;

    public LuDanContentView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(attrs);
    }

    public LuDanContentView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(attrs);
    }

    private void init(AttributeSet attrs) {
        TypedArray attribute = getContext().obtainStyledAttributes(attrs, R.styleable.LuDanView);
        itemWidth = attribute.getDimension(R.styleable.LuDanView_ludan_ballWidth, 30);
        itemHeight = attribute.getDimension(R.styleable.LuDanView_ludan_ballHeight, 30);

        verticalGap = attribute.getDimensionPixelSize(R.styleable.LuDanView_ludan_verticalgap, 6);
        horizontalGap = attribute.getDimensionPixelSize(R.styleable.LuDanView_ludan_horizontalgap, 10);
        textSize = attribute.getDimensionPixelSize(R.styleable.LuDanView_ludan_textSize, 12);

        drawable01 = ContextCompat.getDrawable(getContext(), R.drawable.ssc_lhh_ld_ball01);
        drawable02 = ContextCompat.getDrawable(getContext(), R.drawable.ssc_lhh_ld_ball02);
        drawable03 = ContextCompat.getDrawable(getContext(), R.drawable.ssc_lhh_ld_ball03);
        attribute.recycle();

        paint = new TextPaint();
        paint.setTextSize(textSize);
        paint.setAntiAlias(true);
        paint.setStyle(Paint.Style.FILL);
        paint.setTextAlign(Paint.Align.CENTER);
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);

        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics dm = new DisplayMetrics();
        wm.getDefaultDisplay().getMetrics(dm);
        width = dm.widthPixels;         // 屏幕宽度（像素）

        lineWidthInit = DisplayUtil.dip2px(getContext(), (24 + 2));//左边距  2是左右边距误差
    }

    public void setTextSize(int textSize) {
        this.textSize = textSize;
    }

    public void setDataList(List<List<String>> dataList) {
        this.dataList = dataList;
        requestLayout();
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        Log.i(TAG, "onMeasure(int widthMeasureSpec, int heightMeasureSpec) ....  ");
        // 父控件传进来的宽度以及对应的测量模式
        int specSize = MeasureSpec.getSize(widthMeasureSpec);
        int line = 0;//最大的行数
        // 取宽度、计算可以显示个数
        column = (int) (specSize / (itemWidth + horizontalGap));
        // Log.e("取宽度、计算可以显示个数", "------------------->" + column);
        if (dataList.size() >= column - 1)
            for (int i = column - 1; i >= 0; i--) {
                List<String> dataArr = dataList.get(i);
                if (line < dataArr.size()) {
                    line = dataArr.size();
                }
            }
        else {
            line = 1;
        }
        int specHeight = (int) (line * itemHeight + (line - 1) * verticalGap);
        setMeasuredDimension(specSize, specHeight);
    }


    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        float x, y;
        Paint.FontMetricsInt fontMetrics = paint.getFontMetricsInt();

        float offTextY = (itemHeight - fontMetrics.bottom - fontMetrics.top) / 2;
        int offTextX = (int) itemWidth / 2;

      /*  canvas.drawText(title, offTextX*2, offTextY, normalPaint);
        canvas.translate(0, itemHeight);*/
        for (int i = 0; i < dataList.size(); i++) {
            showCount = i + 1;
            if (i == 0) {
                lineWidth = lineWidthInit;
            }
            lineWidth += itemWidth;
            if (lineWidth > width) {
                showCount = i + 1 - 1;
                break;
            }
            lineWidth += horizontalGap;
        }
        int count = 0;
        for (int i = showCount - 1; i >= 0; i--) {
            x = count * (itemWidth + horizontalGap);
            String text;
            List<String> dataArr = dataList.get(i);
            count++;
            for (int j = 0; j < dataArr.size(); j++) {
                y = j * (itemHeight + verticalGap);
                text = dataArr.get(j);
                Rect drawableRect = new Rect(0, 0, (int) itemWidth, (int) itemHeight);
                drawable01.setBounds(drawableRect);
                drawable02.setBounds(drawableRect);
                drawable03.setBounds(drawableRect);
                canvas.save();
                canvas.translate(x, y);
                if (text.equals("龙")) {
                    drawable01.draw(canvas);
                } else if (text.equals("虎")) {
                    drawable02.draw(canvas);
                } else {
                    drawable03.draw(canvas);
                }

                if (text.equals("龙")) {
                    paint.setColor(getResources().getColor(R.color.white));
                    canvas.drawText(text, offTextX, offTextY, paint);
                } else if (text.equals("虎")) {
                    paint.setColor(getResources().getColor(R.color.white));
                    canvas.drawText(text, offTextX, offTextY, paint);
                } else {
                    paint.setColor(getResources().getColor(R.color.ludan_red));
                    canvas.drawText(text, offTextX, offTextY, paint);
                }
                canvas.restore();
            }
        }
    }

    public void setTitle(String title) {
        this.title = title;
    }

    //刷新界面
    public void refreshViewGroup() {
        requestLayout();
    }
}
