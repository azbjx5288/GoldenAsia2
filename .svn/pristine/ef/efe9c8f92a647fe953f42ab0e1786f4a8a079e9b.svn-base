package com.goldenasia.lottery.fragment;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.text.Html;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.goldenasia.lottery.R;
import com.goldenasia.lottery.app.BaseFragment;
import com.goldenasia.lottery.app.GoldenAsiaApp;
import com.goldenasia.lottery.base.net.JsonString;
import com.goldenasia.lottery.base.net.RestCallback;
import com.goldenasia.lottery.base.net.RestRequest;
import com.goldenasia.lottery.base.net.RestResponse;
import com.goldenasia.lottery.component.CustomDialog;
import com.goldenasia.lottery.component.DialogLayout;
import com.goldenasia.lottery.data.Bet;
import com.goldenasia.lottery.data.GetSinglePickCommand;
import com.goldenasia.lottery.data.Lottery;
import com.goldenasia.lottery.data.Method;
import com.goldenasia.lottery.data.PayMoneyCommand;
import com.goldenasia.lottery.data.Trace;
import com.goldenasia.lottery.data.UserInfo;
import com.goldenasia.lottery.data.UserInfoCommand;
import com.goldenasia.lottery.game.PromptManager;
import com.goldenasia.lottery.material.ConstantInformation;
import com.goldenasia.lottery.material.ShoppingCart;
import com.goldenasia.lottery.material.Ticket;
import com.goldenasia.lottery.pattern.ChooseTips;
import com.goldenasia.lottery.pattern.ShroudView;
import com.goldenasia.lottery.pattern.TitleTimingSalesView;
import com.goldenasia.lottery.user.UserCentre;
import com.goldenasia.lottery.util.DanTiaoUtils;
import com.goldenasia.lottery.util.SharedPreferencesUtils;
import com.goldenasia.lottery.view.adapter.ShoppingAdapter;
import com.umeng.analytics.MobclickAgent;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONException;
import org.json.JSONObject;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.OnClick;
import in.srain.cube.util.LocalDisplay;
import in.srain.cube.views.loadmore.LoadMoreContainer;
import in.srain.cube.views.loadmore.LoadMoreHandler;
import in.srain.cube.views.loadmore.LoadMoreListViewContainer;
import in.srain.cube.views.ptr.PtrClassicFrameLayout;
import in.srain.cube.views.ptr.PtrDefaultHandler;
import in.srain.cube.views.ptr.PtrFrameLayout;
import in.srain.cube.views.ptr.PtrHandler;

/**
 * 购物车
 * Created on 2016/02/17.
 *
 * @author ACE
 */
public class ShoppingFragment extends BaseFragment
{
    private static final String TAG = ShoppingFragment.class.getSimpleName();
    private static final int BUY_TRACE_ID = 1;
    private static final int ID_USER_INFO = 2;
    private static final int TRACK_TURNED_PAGE_LOGIN = 1;
    private static final int TRACK_TURNED_PAGE_RECHARGE = 2;
    private static final int TRACK_TURNED_PAGE_PICK = 3;
    private static final int TRACK_TURNED_PAGE_DANTIAO= 4;//单挑
    private static final int GET_SINGLE_PICK = 5;
    
    @BindView(R.id.load_more_list_view_ptr_frame)
    PtrClassicFrameLayout ptrFrameLayout;
    @BindView(R.id.load_more_list_view_container)
    LoadMoreListViewContainer loadMoreListViewContainer;
    @BindView(R.id.shopping_list)
    ListView shoppingList;
    @BindView(R.id.lottery_shopping_buy)
    Button shopping_buy;
    @BindView(R.id.floating_tips)
    Button floatingTips;
    
    private TitleTimingSalesView timingView;
    private ShoppingAdapter adapter;
    private ShroudView shroudView;
    private ChooseTips chooseTips;
    private Lottery lottery;
    private ShoppingCart cart;
    private UserCentre userCentre;
    private boolean isInTraceState;
    
    /**
     * 辅助用，投注异常时，上报到服务器的错误信息
     */
    private String unusualInfo;
    
    private List<Ticket> ticketList = new ArrayList<>();
    private int start = 0;
    private int count = 10;
    private int touchSlop = 10;
    private double tempAmount = 0;
    
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
    {
        return inflateView(inflater, container, "投注", R.layout.shopping_fragment);
    }
    
    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState)
    {
        super.onViewCreated(view, savedInstanceState);
        parameter();
        if (lottery != null)
        {
            initInfo();
            loadTimingView();
            loadListInfo();
            planPrompt();
        }
        GetSinglePick();
    }

    private void GetSinglePick() {
        GetSinglePickCommand command = new GetSinglePickCommand();
        executeCommand(command, restCallback, GET_SINGLE_PICK);
    }
    
    private void parameter()
    {
        lottery = (Lottery) getArguments().getSerializable("lottery");
        userCentre = GoldenAsiaApp.getUserCentre();
        cart = ShoppingCart.getInstance();
    }
    
    private void initInfo()
    {
        cart.init(lottery);
        setTitle(lottery.getCname());
        executeCommand(new UserInfoCommand(), restCallback, ID_USER_INFO);
    }
    
    @Override
    public void setUserVisibleHint(boolean isVisibleToUser)
    {
        super.setUserVisibleHint(isVisibleToUser);
        if (isVisibleToUser)
        {
            executeCommand(new UserInfoCommand(), restCallback, ID_USER_INFO);
        }
    }
    
    private void loadTimingView()
    {
        shroudView = new ShroudView(ShoppingFragment.this, findViewById(R.id.shopping_bottom), lottery);
        timingView = new TitleTimingSalesView(getActivity(), findViewById(R.id.shopping_top_timing), lottery);
        timingView.setOnSalesIssueListener((String issue) ->
        {
            shroudView.setData(issue);
        });
        chooseTips = new ChooseTips(findViewById(R.id.shopping_choosetip));
        //        shroudView.setChaseShowAndHide(lottery);
    }
    
    private void loadListInfo()
    {
        // 为listview的创建一个headerview,注意，如果不加会影响到加载的footview的显示！
        View headerMarginView = new View(getContext());
        headerMarginView.setLayoutParams(new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
                LocalDisplay.dp2px(20)));
        shoppingList.addHeaderView(headerMarginView);
        shoppingList.setOnTouchListener(onTouchListener);
        floatingTips.setOnClickListener((View v) -> shoppingList.smoothScrollByOffset(10));
        adapter = new ShoppingAdapter(ticketList);
        adapter.setOnDeleteClickListener((int position) ->
        {
            ticketList.remove(position);
            ShoppingCart.getInstance().deleteCode(position);
            loadMoreListViewContainer.postDelayed(new Runnable()
            {
                @Override
                public void run()
                {
                    if (start == 0)
                    {
                        start++;
                    }
                    List startList = getMockData(start * 10, 1);
                    ticketList.addAll(startList);
                    if (start * 10 > cart.getCodesMap().size())
                    {
                        loadMoreListViewContainer.loadMoreFinish(false, false);
                    } else
                    {
                        loadMoreListViewContainer.loadMoreFinish(false, true);
                    }
                    loadingMoreTips();
                }
            }, 300);
            adapter.notifyDataSetChanged();
            planPrompt();
        });
        shoppingList.setAdapter(adapter);
        //3.设置下拉刷新组件和事件监听
        ptrFrameLayout.setLoadingMinTime(300);
        ptrFrameLayout.setPtrHandler(new PtrHandler()
        {
            @Override
            public boolean checkCanDoRefresh(PtrFrameLayout frame, View content, View header)
            {
                return PtrDefaultHandler.checkContentCanBePulledDown(frame, shoppingList, header);
            }
            
            @Override
            public void onRefreshBegin(PtrFrameLayout frame)
            {
                //实现下拉刷新的功能
                ptrFrameLayout.postDelayed(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        ticketList.clear();
                        start = 0;
                        ticketList.addAll(getMockData(start, count));
                        ptrFrameLayout.refreshComplete();
                        //第一个参数是：数据是否为空；第二个参数是：是否还有更多数据
                        loadMoreListViewContainer.loadMoreFinish(false, true);
                        loadingMoreTips();
                        adapter.notifyDataSetChanged();
                    }
                }, 300);
            }
        });
        //设置延时自动刷新数据
        ptrFrameLayout.postDelayed(new Runnable()
        {
            @Override
            public void run()
            {
                if (floatingTips != null)
                    floatingTips.setVisibility(View.VISIBLE);
                if (ptrFrameLayout != null)
                    ptrFrameLayout.autoRefresh(true);
            }
        }, 300);
        
        //4.加载更多的组件
        loadMoreListViewContainer.setAutoLoadMore(true);//设置是否自动加载更多
        loadMoreListViewContainer.useDefaultHeader();
        //5.添加加载更多的事件监听
        loadMoreListViewContainer.setLoadMoreHandler(new LoadMoreHandler()
        {
            @Override
            public void onLoadMore(LoadMoreContainer loadMoreContainer)
            {
                loadMoreListViewContainer.postDelayed(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        start++;
                        ticketList.addAll(getMockData(start * 10, count));
                        if (start * 10 > cart.getCodesMap().size())
                        {
                            loadMoreListViewContainer.loadMoreFinish(false, false);
                        } else
                        {
                            loadMoreListViewContainer.loadMoreFinish(false, true);
                        }
                        loadingMoreTips();
                        adapter.notifyDataSetChanged();
                    }
                }, 300);
            }
        });
        
        shroudView.setModeItemListener((multiple) ->
        {
            cart.setPlanBuyRule(multiple);
            planPrompt();
        });
    }
    
    View.OnTouchListener onTouchListener = new View.OnTouchListener()
    {
        
        float lastY = 0f;
        float currentY = 0f;
        int lastDirection = 0;
        int currentDirection = 0;
        
        @Override
        public boolean onTouch(View v, MotionEvent event)
        {
            switch (event.getAction())
            {
                case MotionEvent.ACTION_DOWN:
                    lastY = event.getY();
                    currentY = event.getY();
                    currentDirection = 0;
                    break;
                case MotionEvent.ACTION_MOVE:
                    if (shoppingList.getFirstVisiblePosition() > 0)
                    {
                        float tmpCurrentY = event.getY();
                        if (Math.abs(tmpCurrentY - lastY) > touchSlop)
                        {
                            currentY = tmpCurrentY;
                            currentDirection = (int) (currentY - lastY);
                            if (lastDirection != currentDirection)
                            {
                                if (currentDirection < 0)
                                {
                                    animateHide();
                                } else
                                {
                                    animateBack();
                                }
                            }
                            lastY = currentY;
                        }
                    }
                    break;
                case MotionEvent.ACTION_CANCEL:
                case MotionEvent.ACTION_UP:
                    currentDirection = 0;
                    loadingMoreTips();
                    break;
            }
            return false;
        }
    };
    
    private void loadingMoreTips()
    {
        if (ticketList.size() < cart.getCodesMap().size())
        {
            animateBack();
        } else
        {
            animateHide();
        }
    }

    /*AbsListView.OnScrollListener onScrollListener = new AbsListView.OnScrollListener() {
        int lastPosition = 0;
        int state = AbsListView.OnScrollListener.SCROLL_STATE_IDLE;

        @Override
        public void onScrollStateChanged(AbsListView view, int scrollState) {
            state = scrollState;
        }

        @Override
        public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
            if (firstVisibleItem == 0) {
                animateBack();
            }
            if (firstVisibleItem > 0) {
                if (firstVisibleItem > lastPosition && state == SCROLL_STATE_FLING) {
                    animateHide();
                }
            }
            lastPosition = firstVisibleItem;
        }
    };*/
    
    AnimatorSet backAnimatorSet;
    
    private void animateBack()
    {
        if (hideAnimatorSet != null && hideAnimatorSet.isRunning())
        {
            hideAnimatorSet.cancel();
        }
        if (backAnimatorSet != null && backAnimatorSet.isRunning())
        {
        
        } else
        {
            backAnimatorSet = new AnimatorSet();
            ObjectAnimator footerAnimator = ObjectAnimator.ofFloat(floatingTips, "translationY", floatingTips
                    .getTranslationY(), 0f);
            ArrayList<Animator> animators = new ArrayList<>();
            animators.add(footerAnimator);
            backAnimatorSet.setDuration(300);
            backAnimatorSet.playTogether(animators);
            backAnimatorSet.start();
        }
    }
    
    AnimatorSet hideAnimatorSet;
    
    private void animateHide()
    {
        if (backAnimatorSet != null && backAnimatorSet.isRunning())
        {
            backAnimatorSet.cancel();
        }
        if (hideAnimatorSet != null && hideAnimatorSet.isRunning())
        {
        
        } else
        {
            hideAnimatorSet = new AnimatorSet();
            ObjectAnimator footerAnimator = ObjectAnimator.ofFloat(floatingTips, "translationY", floatingTips
                    .getTranslationY(), floatingTips.getHeight());
            ArrayList<Animator> animators = new ArrayList<>();
            animators.add(footerAnimator);
            hideAnimatorSet.setDuration(200);
            hideAnimatorSet.playTogether(animators);
            hideAnimatorSet.start();
        }
    }
    
    /**
     * 做一个简单的内容数据
     *
     * @param start  开始位置
     * @param number 每次拉取的数量
     * @return
     */
    private List<Ticket> getMockData(int start, int number)
    {
        List<Ticket> cartTicket = cart.getCodesMap();
        List<Ticket> slist = new ArrayList<>();
        int size = cartTicket.size();
        if (cartTicket.size() > 0)
        {
            if (start == 0)
            {
                if (size < number)
                {
                    slist.addAll(cartTicket.subList(start, size));
                } else
                {
                    slist.addAll(cartTicket.subList(start, number));
                }
            } else
            {
                if (size > start + number)
                {
                    slist.addAll(cartTicket.subList(start, start + number));
                } else if ((size - start) > 0 && number > 1)
                {
                    slist.addAll(cartTicket.subList(start, size));
                } else if (number == 1 && size - (start + number) > 0)
                {
                    slist.addAll(cartTicket.subList(start, start + number));
                }
            }
            return slist;
        }
        return new ArrayList<>();
    }
    
    public void planPrompt()
    {
        chooseTips.setTipsText(String.format("%d", cart.getPlanNotes()), String.format("%.3f", cart.getPlanAmount()),
                String.format("%.3f", userCentre.getUserInfo().getBalance()));
    }
    
    @Override
    public void onResume()
    {
        super.onResume();
        if (ptrFrameLayout != null)
            ptrFrameLayout.autoRefresh(true);
    }
    
    @Override
    public void onDestroyView()
    {
        /*if (timingView != null){
            timingView.stop();
        }*/
        super.onDestroyView();
    }
    
    @OnClick(R.id.random)
    public void random()
    {
    
    }
    
    @OnClick(R.id.reelection)
    public void reelection()
    {
        getActivity().finish();
    }
    
    @OnClick(R.id.emptied)
    public void clear()
    {
        ShoppingCart.getInstance().clear();
        adapter.setData(new ArrayList<>());
        adapter.notifyDataSetChanged();
        planPrompt();
    }
    
    @OnClick(R.id.lottery_shopping_buy)
    public void total()
    {
        if (timingView.getIssue() == null || timingView.getIssue().length() <= 0)
        {
            tipDialog("温馨提示", "请稍等，正在加载销售奖期信息……", 0);
            return;
        }
        // ①判断：购物车中是否有投注
        if (!cart.isEmpty())
        {
            // ②判断：用户是否登录——被动登录
            if (userCentre.isLogin())
            {
                // ③判断：用户的余额是否满足投注需求
                if (cart.getPlanAmount() <= userCentre.getUserInfo().getBalance())
                {
                    // ④界面跳转：跳转到追期和倍投的设置界面

                    DanTiaoUtils danTiaoUtils=new DanTiaoUtils();
                    String danTiaoString=danTiaoUtils.isShowDialog(lottery.getLotteryId(),cart.getCodesMap());

                    if(TextUtils.isEmpty(danTiaoString)){
                        verificationData();
                    }else{
                        tipDialog("提示",danTiaoString,  TRACK_TURNED_PAGE_DANTIAO);
                        return;
                    }
                } else
                {
                    // 提示用户：充值去；界面跳转：用户充值界面
                    tipDialog("温馨提示", "请充值", TRACK_TURNED_PAGE_RECHARGE);
                }
            } else
            {
                // 提示用户：登录去；界面跳转：用户登录界面
                tipDialog("温馨提示", "请重新登录", TRACK_TURNED_PAGE_LOGIN);
            }
        } else
        {
            // 提示用户需要选择一注
            tipDialog("温馨提示", "您需要选择一注", TRACK_TURNED_PAGE_PICK);
        }
    }

    /**
     * 数据验证
     */
    private void verificationData()
    {
        Log.i(TAG, cart.getCodeStr());
        
        final PayMoneyCommand command = new PayMoneyCommand();
        command.setLotteryId(lottery.getLotteryId());
        command.setIssue(timingView.getIssue());
        command.setPrizeMode(cart.getPrizeMode() > 0 ? 1 : 0);/*!(userCentre.getBonusMode(lottery.getLotteryId()) ==
        0)*/
        command.setModes(cart.getLucreMode().getModes());
        if(lottery.getLotteryId()==14){//山东快乐扑克
            command.setCodes(cart.getCodeStr().replace("10", "T"));
        }else{
            command.setCodes(cart.getCodeStr());
        }
        command.setMultiple(cart.getMultiple());
        command.setTraceNum(cart.getTraceNumber());
        command.setStopOnWin(cart.isStopOnWin());
        command.setToken(ConstantInformation.randomToken());
        BigDecimal becimal = new BigDecimal(cart.getPlanAmount());
        
        double planAmount = becimal.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
        String msg = getActivity().getResources().getString(R.string.is_shopping_list_tip);
        msg = StringUtils.replaceEach(msg, new String[]{"NOTE", "UNIT", "DOUBLE", "MONEY"}, new String[]{String
                .valueOf(cart.getPlanNotes()), cart.getLucreMode().getName(), String.valueOf(cart.getMultiple()),
                String.format("%.3f", planAmount)});
        
        if (!timingView.getIssue().isEmpty())
        {
            View view = LayoutInflater.from(getActivity()).inflate(R.layout.popup_buy_succeed, null);
            ImageView icon = (ImageView) view.findViewById(R.id.icon);
            icon.setImageResource(ConstantInformation.getLotteryLogo(lottery.getLotteryId(), true));
            TextView name = (TextView) view.findViewById(R.id.name);
            name.setText(lottery.getCname());
            TextView issue = (TextView) view.findViewById(R.id.issue);
            issue.setText(timingView.getIssue());
            TextView info = (TextView) view.findViewById(R.id.info);
            info.setText(Html.fromHtml(msg).toString());
            
            CustomDialog.Builder builder = new CustomDialog.Builder(getActivity());
            builder.setContentView(view);
            builder.setTitle("温馨提示");
            builder.setLayoutSet(DialogLayout.SINGLE);
            builder.setPositiveButton("确认投注", (dialog, which) ->
            {
                isInTraceState = cart.getTraceNumber() > 0;
                shopping_buy.setEnabled(false);
                //shopping_buy.setBackgroundResource(R.drawable.button_type_un);
                unusualInfo = ConstantInformation.gatherInfo(getActivity(), command);
                executeCommand(command, restCallback, BUY_TRACE_ID);
                dialog.dismiss();
            });
            builder.create().show();
        }
    }
    
    private void receiptOrderDialog(final String orderTip)
    {
        CustomDialog.Builder builder = new CustomDialog.Builder(getActivity());
        builder.setMessage(orderTip.isEmpty() ? "投注失败!请重新投注" : "订单：" + orderTip);
        builder.setTitle(orderTip.isEmpty() ? "投注失败!" : "投注成功");
        if (!orderTip.isEmpty())
        {
            View view = LayoutInflater.from(getActivity()).inflate(R.layout.popup_buy_succeed, null);
            ImageView icon = (ImageView) view.findViewById(R.id.icon);
            icon.setImageResource(ConstantInformation.getLotteryLogo(lottery.getLotteryId(), true));
            TextView name = (TextView) view.findViewById(R.id.name);
            name.setText(lottery.getCname());
            TextView issue = (TextView) view.findViewById(R.id.issue);
            issue.setText(timingView.getIssue());
            TextView info = (TextView) view.findViewById(R.id.info);
            String isBuySucceedTips = getActivity().getResources().getString(R.string.is_buy_succeed_tips);
            isBuySucceedTips = StringUtils.replaceEach(isBuySucceedTips, new String[]{"ORDER_TIP", "BALANCE"}, new
                    String[]{orderTip, String.format("%.3f", tempAmount)});
            info.setText(Html.fromHtml(isBuySucceedTips));
            //info.setText("订单编号：" + orderTip + "\n\n总金额：￥" + tempAmount);
            
            builder.setContentView(view);
        }
        
        builder.setLayoutSet(DialogLayout.LEFT_AND_RIGHT);
        builder.setPositiveButton("查看投注记录", (dialog, which) ->
        {
            dialog.dismiss();
            if (!orderTip.isEmpty())
            {
                if (isInTraceState)
                {
                    Trace trace = new Trace();
                    trace.setWrapId(orderTip);
                    BetOrTraceDetailFragment.launch(ShoppingFragment.this, trace);
                } else
                {
                    Bet bet = new Bet();
                    bet.setWrapId(orderTip);
                    BetOrTraceDetailFragment.launch(ShoppingFragment.this, bet);
                }
            }
            getActivity().finish();
        });
        
        builder.setNegativeButton("继续投注", (dialog, which) ->
        {
            getActivity().finish();
            dialog.dismiss();
        });
        CustomDialog dialog = builder.create();
        dialog.setOnDismissListener((d) -> getActivity().finish());
        dialog.show();
    }
    
    private void tipDialog(String title, String msg, final int track)
    {
        CustomDialog.Builder builder = new CustomDialog.Builder(getContext());
        builder.setMessage(msg);
        builder.setTitle(title);
        switch (track)
        {
            case TRACK_TURNED_PAGE_RECHARGE:
                builder.setLayoutSet(DialogLayout.LEFT_AND_RIGHT);
                builder.setNegativeButton("知道了", (dialog, which) ->
                {
                    dialog.dismiss();
                    if (track == TRACK_TURNED_PAGE_PICK)
                    {
                        getActivity().finish();
                    }
                });
                builder.setPositiveButton("去充值", (dialog, which) ->
                {
                    dialog.dismiss();
                    launchFragment(RechargeApply.class);
                });
                break;
            case TRACK_TURNED_PAGE_DANTIAO:
                builder.setLayoutSet(DialogLayout.LEFT_AND_RIGHT);
                builder.setNegativeButton("取消", (dialog, which) ->
                {
                    dialog.dismiss();
                    if (track == TRACK_TURNED_PAGE_PICK)
                    {
                        getActivity().finish();
                    }
                });
                builder.setPositiveButton("确认", (dialog, which) ->
                {
                    dialog.dismiss();
                    verificationData();
                });
                break;
            default:
                builder.setLayoutSet(DialogLayout.SINGLE);
                builder.setPositiveButton("知道了", (dialog, which) -> dialog.dismiss());
        }
        builder.create().show();
    }
    
    private void saveLastMethod()
    {
        Method method = (Method) getArguments().getSerializable("lastMethod");
        if (method != null)
        {
            String fileName = GoldenAsiaApp.getUserCentre().getUserID() + " lastPlay";
            try
            {
                SharedPreferencesUtils.putObject(getActivity(), fileName, lottery.getName(), method);
            } catch (Exception e)
            {
            }
        }
    }
    
    private RestCallback restCallback = new RestCallback()
    {
        @Override
        public boolean onRestComplete(RestRequest request, RestResponse response)
        {
            switch (request.getId())
            {
                case BUY_TRACE_ID:
                    String jsonStr = (String) response.getData();
                    if (jsonStr != null)
                    {
                        tempAmount = cart.getPlanAmount();
                        cart.clear();
                        ticketList.clear();
                        initInfo();
                        shopping_buy.setEnabled(true);
                        //shopping_buy.setBackgroundResource(R.drawable.button_type);
                        adapter.notifyDataSetChanged();
                        receiptOrderDialog(jsonStr);
                        tempAmount = 0;
                        cart.setPrizeMode(-1);
                        saveLastMethod();
                    }
                    break;
                case ID_USER_INFO:
                    UserInfo userInfo = ((UserInfo) response.getData());
                    userCentre.setUserInfo(userInfo);
                    if (userInfo != null)
                    {
                        planPrompt();
                    }
                    break;
                case GET_SINGLE_PICK:
                    String jsonString= ((JsonString) response.getData()).getJson();
                    ConstantInformation.sigle_pick=jsonString;
                    break;
            }
            return true;
        }
        
        @Override
        public boolean onRestError(RestRequest request, int errCode, String errDesc)
        {
            shopping_buy.setEnabled(true);
            //shopping_buy.setBackgroundResource(R.drawable.button_type);
            if (errCode == 7006)
            {
                CustomDialog dialog = PromptManager.showCustomDialog(getActivity(), "重新登录", errDesc, "重新登录", errCode);
                dialog.setCancelable(false);
                dialog.show();
                return true;
            } else if (errCode == 2220)
            {
                showToast(errDesc, Toast.LENGTH_LONG);
                MobclickAgent.reportError(getActivity(), unusualInfo);
                Log.e(TAG, unusualInfo);
                return true;
            }
            return false;
        }
        
        @Override
        public void onRestStateChanged(RestRequest request, @RestRequest.RestState int state)
        {
        }
    };

//    public List<Ticket> getTicketList() {
//        return ticketList;
//    }
}
