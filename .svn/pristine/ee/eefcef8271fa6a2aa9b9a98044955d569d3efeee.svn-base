package com.goldenasia.lottery.fragment;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.IdRes;
import android.support.annotation.Nullable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.JavascriptInterface;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.cpiz.android.bubbleview.BubbleLinearLayout;
import com.cpiz.android.bubbleview.BubblePopupWindow;
import com.cpiz.android.bubbleview.BubbleStyle;
import com.goldenasia.lottery.BuildConfig;
import com.goldenasia.lottery.R;
import com.goldenasia.lottery.app.BaseFragment;
import com.goldenasia.lottery.data.Lottery;
import com.goldenasia.lottery.game.Game;
import com.goldenasia.lottery.game.LhcGame;
import com.goldenasia.lottery.game.OnSelectedListener;
import com.goldenasia.lottery.material.ShoppingCart;
import com.goldenasia.lottery.material.Ticket;
import com.goldenasia.lottery.pattern.TitleTimingView;
import com.goldenasia.lottery.util.ToastUtils;
import com.phillipcalvin.iconbutton.IconButton;
import com.umeng.analytics.MobclickAgent;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * 选号界面
 * Created by Alashi on 2016/2/17.
 */
public class GameLhcFragment extends BaseFragment implements OnSelectedListener {
    private static final String TAG = GameLhcFragment.class.getSimpleName();
    private static final int FLAG_MAX_PRIZE = 1;
    private static final int FLAG_MIN_PRIZE = 0;

    WebView webView;
    @Bind(R.id.pick_game_layout)
    LinearLayout pickGameLayout;
    @Bind(R.id.manualinput_layout)
    LinearLayout manualinputLayout;
    @Bind(R.id.pick_random)
    Button pickRandom;
    @Bind(R.id.pick_clear)
    IconButton pickClear;
    @Bind(R.id.pick_notice)
    TextView pickNotice;
    @Bind(R.id.choose_done_button)
    Button chooseDoneButton;
    @Bind(R.id.lottery_choose_bottom)
    LinearLayout lotteryChooseBottom;
    @Bind(R.id.prize_mode_layout)
    LinearLayout prizeModeLayout;
    @Bind(R.id.prize_mode_show)
    TextView prizeModeShow;

    private TitleTimingView timingView;
    private Lottery lottery;
    private LhcGame lhcGame;
    private BubblePopupWindow bubblePopupWindow;
    private BubbleLinearLayout bubbleLinearLayout;
    private RadioGroup prizeGroup;
    private RadioButton maxButton;
    private RadioButton minButton;

    private ShoppingCart shoppingCart;
    private int prizeMode = -1;

    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle
            savedInstanceState) {
        return inflater.inflate(R.layout.game_fragment, container, false);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        applyArguments();
        loadTimingView();
        initRandom();
        initPrizeMode();
    }

    private void applyArguments() {
        shoppingCart = ShoppingCart.getInstance();
        lottery = (Lottery) getArguments().getSerializable("lottery");
    }

    private void loadTimingView() {
        timingView = new TitleTimingView(getActivity(), findViewById(R.id.pick_title_view), lottery);
    }

    private void initRandom() {

    }

    private void initPrizeMode() {
        View rootView = LayoutInflater.from(getActivity()).inflate(R.layout.popup_prize_mode, null);
        bubbleLinearLayout = (BubbleLinearLayout) rootView.findViewById(R.id.popup_bubble);
        bubblePopupWindow = new BubblePopupWindow(rootView, bubbleLinearLayout);
        prizeGroup = (RadioGroup) rootView.findViewById(R.id.prize_group);
        maxButton = (RadioButton) rootView.findViewById(R.id.max);
        minButton = (RadioButton) rootView.findViewById(R.id.min);

        prizeModeLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                bubblePopupWindow.showArrowTo(v, BubbleStyle.ArrowDirection.Down);
            }
        });
        prizeGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
                switch (checkedId) {
                    case R.id.max:
                        changePrizeMode(FLAG_MIN_PRIZE, lhcGame.getMethod().getMaxRebate(), lhcGame.getMethod()
                                .getMaxRebatePrize());
                        break;
                    case R.id.min:
                        changePrizeMode(FLAG_MAX_PRIZE, lhcGame.getMethod().getMinRebate(), lhcGame.getMethod()
                                .getMinRebatePrize());
                        break;
                }
            }
        });
    }

    private void changePrizeMode(int prizeMode, float rebate, float rebatePrize) {
        this.prizeMode = prizeMode;
        prizeModeShow.setText(rebatePrize + "/" + String.format("%.1f%%", rebate * 100));
        bubblePopupWindow.dismiss();
    }

    private void initPrizes() {
        prizeGroup.check(R.id.min);
        prizeModeShow.setText(lhcGame.getMethod().getMinRebatePrize() + "/" + String.format("%.1f%%", lhcGame.getMethod().getMinRebate() * 100));
        maxButton.setText(lhcGame.getMethod().getMaxRebatePrize() + "/" + String.format("%.1f%%", lhcGame.getMethod().getMaxRebate() * 100));
        minButton.setText(lhcGame.getMethod().getMinRebatePrize() + "/" + String.format("%.1f%%", lhcGame.getMethod().getMinRebate() * 100));
        if (lhcGame.getMethod().getMinRebate() == lhcGame.getMethod().getMaxRebate())
            maxButton.setVisibility(View.GONE);
        else
            maxButton.setVisibility(View.VISIBLE);
    }

    private void loadWebViewIfNeed() {
        if (webView != null) {
            return;
        }
        lotteryChooseBottom.postDelayed(new Runnable() {
            @Override
            public void run() {
                synchronized (getActivity()) {
                    if (isFinishing()) {
                        return;
                    }
                    if (webView != null) {
                        update2WebView();
                        return;
                    }
                    webView = new WebView(getActivity());
                    lotteryChooseBottom.addView(webView, 1, 1);
                    initWebView();
                    webView.loadUrl("file:///android_asset/web/game.html");
                }
            }
        }, 0);
    }

    @Override
    public void onPause() {
        if (webView != null) {
            webView.onPause();
        }
        super.onPause();
    }

    @Override
    public void onResume() {
        super.onResume();
        if (webView != null) {
            webView.onResume();
        }
    }

    @Override
    public void onDestroyView() {
        if (timingView != null) {
            timingView.stop();
        }
        if (lhcGame != null) {
            lhcGame.destroy();
        }
        if (webView != null) {
            webView.destroy();
        }
        if (shoppingCart != null)
            shoppingCart.setPrizeMode(-1);
        super.onDestroyView();
        ButterKnife.unbind(this);
    }

    /**
     * 清空
     */
    @OnClick(R.id.pick_clear)
    public void onClearPick() {
        //        lhcGame.getSubmitArray();
        if (lhcGame != null) {
            lhcGame.onClearPick(lhcGame);
        }
    }

    /**
     * 随机
     */
    @OnClick(R.id.pick_random)
    public void onRandom() {
        if (lhcGame != null) {
            lhcGame.onRandomCodes();
        }
    }

    /**
     * 投注
     */
    @OnClick(R.id.choose_done_button)
    public void onChooseDone() {
        if (lhcGame == null) {
            return;
        }
        if (shoppingCart.getPrizeMode() != -1 && prizeMode != shoppingCart.getPrizeMode()) {
            ToastUtils.showShortToast(getActivity(), "本次投注与购物车订单的奖金模式不一致，需分开投注");
            return;
        }
        if (lhcGame.getSingleNum() > 0 && lhcGame.isExchange() == true) {
            String codes = lhcGame.getSubmitCodes();
            Ticket ticket = new Ticket();
            ticket.setChooseMethod(lhcGame.getMethod());
            ticket.setChooseNotes(lhcGame.getSingleNum());
            ticket.setCodes(codes);

            shoppingCart.init(lottery);
            shoppingCart.addTicket(ticket);
        } else if (lhcGame.getSingleNum() > 0 && !lhcGame.isExchange()) {
            shoppingCart.init(lottery);
            List<String> codes = lhcGame.getSubmitArray();
            int index = 0;
            ExecutorService ex = Executors.newFixedThreadPool(5);
            int dealSize = 2000;
            List<Future<List<Ticket>>> futures = new ArrayList<>(5);
            //分配
            for (int i = 0; i < 5; i++, index += dealSize) {
                int start = index;
                if (start >= codes.size())
                    break;
                int end = start + dealSize;
                end = end > codes.size() ? codes.size() : end;
                futures.add(ex.submit(new Task(codes, start, end)));
            }
            try {
                //处理 合并操作
                List<Ticket> result = new ArrayList<>();
                for (Future<List<Ticket>> future : futures) {
                    result.addAll(future.get());
                }
                shoppingCart.addTicketList(result);
                lhcGame.onClearPick(lhcGame);
            } catch (Exception e) {
                MobclickAgent.reportError(getActivity(), TAG + "->" + e.getMessage());
            }
        }
        Bundle bundle = new Bundle();
        bundle.putSerializable("lottery", lottery);
        shoppingCart.setPrizeMode(prizeMode);
        launchFragmentForResult(ShoppingFragment.class, bundle, 1);
    }

    private void initWebView() {
        webView.setOverScrollMode(WebView.OVER_SCROLL_ALWAYS);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            WebView.setWebContentsDebuggingEnabled(BuildConfig.DEBUG);
        }
        WebSettings webSettings = webView.getSettings();
        webSettings.setSupportZoom(false);
        webSettings.setBuiltInZoomControls(false);
        webSettings.setLoadWithOverviewMode(true);
        webSettings.setUseWideViewPort(true);
        webSettings.setSupportMultipleWindows(true);
        webSettings.setAppCacheEnabled(true);
        webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
        webSettings.setDomStorageEnabled(true);
        webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);

        webSettings.setJavaScriptEnabled(true);
        webView.addJavascriptInterface(new JsInterface(), "androidJs");
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (lhcGame != null) {
            lhcGame.reset();
        }
    }

    private class JsInterface {
        @JavascriptInterface
        public String getData() {
            if (lhcGame == null) {
                return "";
            }
            return lhcGame.getWebViewCode();
        }

        @JavascriptInterface
        public String getMethodName() {
            if (lhcGame == null) {
                return "";
            }
            return lhcGame.getMethod().getName();
        }

        @JavascriptInterface
        public void result(int singleNum, boolean isDup) {
            Log.d(TAG, "result() called with: " + "singleNum = [" + singleNum + "], isDup = [" + isDup + "]");
            if (lhcGame == null) {
                return;
            }
            lhcGame.setNumState(singleNum, isDup);
            webView.post(updatePickNoticeRunnable);
        }
    }

    private void update2WebView() {
        if (webView == null) {
            return;
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            webView.evaluateJavascript("calculate();", null);
        } else {
            webView.loadUrl("javascript:calculate();");
        }
    }

    private Runnable updatePickNoticeRunnable = new Runnable() {
        @Override
        public void run() {
            if (lhcGame == null) {
                return;
            }
            if (pickNotice != null)
                pickNotice.setText(String.format("共%d注", lhcGame.getSingleNum()));
            if (lhcGame.getSingleNum() > 0 && prizeMode != -1 && chooseDoneButton != null)
            {
                chooseDoneButton.setEnabled(lhcGame.getSingleNum() > 0);
            } else
            {
                chooseDoneButton.setEnabled(!shoppingCart.isEmpty());
            }
        }
    };

    public LhcGame getLhcGame() {
        return lhcGame;
    }

    public void setLhcGame(LhcGame lhcGame) {
        this.lhcGame = lhcGame;
    }

    public void removeViews() {
        if (pickGameLayout != null && pickGameLayout.getChildCount() > 0) {
            pickGameLayout.removeAllViews();
        }
    }

    public void changeGameMethod() {
        pickNotice.setText("共0注");
        if(chooseDoneButton!=null) {
            chooseDoneButton.setEnabled(!shoppingCart.isEmpty());
        }
        lhcGame.inflate(pickGameLayout);
        lhcGame.setOnSelectedListener(this);
        loadWebViewIfNeed();
        initPrizes();
    }

    @Override
    public void onChanged(Game game) {

    }

    @Override
    public void onChanged(LhcGame lhcGame) {
        loadWebViewIfNeed();
        update2WebView();
    }

    private class Task implements Callable<List<Ticket>> {

        private List<String> list;
        private int start;
        private int end;

        public Task(List<String> list, int start, int end) {
            this.list = list;
            this.start = start;
            this.end = end;
        }

        @Override
        public List<Ticket> call() throws Exception {
            List<Ticket> retList = new ArrayList<>();
            for (int i = start; i < end; i++) {
                //你的处理逻辑
                Ticket ticket = new Ticket();
                ticket.setChooseMethod(lhcGame.getMethod());
                ticket.setChooseNotes(lhcGame.getColumn() > 1 ? 1 : lhcGame.getSingleNum());
                ticket.setCodes(list.get(i));
                retList.add(ticket);
            }
            //返回处理结果
            return retList;
        }
    }
}
