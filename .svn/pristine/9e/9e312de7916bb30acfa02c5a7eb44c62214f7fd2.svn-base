package com.goldenasia.lottery.fragment;

import android.os.Bundle;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.cpiz.android.bubbleview.BubbleLinearLayout;
import com.cpiz.android.bubbleview.BubblePopupWindow;
import com.cpiz.android.bubbleview.BubbleStyle;
import com.goldenasia.lottery.R;
import com.goldenasia.lottery.app.BaseFragment;
import com.goldenasia.lottery.base.net.RestCallback;
import com.goldenasia.lottery.base.net.RestRequest;
import com.goldenasia.lottery.base.net.RestRequestManager;
import com.goldenasia.lottery.base.net.RestResponse;
import com.goldenasia.lottery.component.CustomDialog;
import com.goldenasia.lottery.component.DialogLayout;
import com.goldenasia.lottery.data.Platform;
import com.goldenasia.lottery.data.TranMoney;
import com.goldenasia.lottery.data.TransferFundsCommand;
import com.goldenasia.lottery.data.TransferRouteCommand;
import com.goldenasia.lottery.game.PromptManager;
import com.goldenasia.lottery.material.ConstantInformation;
import com.goldenasia.lottery.util.NumbericUtils;
import com.goldenasia.lottery.view.adapter.TransferAdapter;
import com.google.gson.reflect.TypeToken;

import org.apache.commons.codec.digest.DigestUtils;

import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * Created by ACE-PC on 2017/1/16.
 * 平台转账
 */

public class TransferPlatformFragment extends BaseFragment {
    private static final int TRACE_TRANSFER_ROUTE = 1;
    private static final int TRACE_TRANSFER_SUBMIT = 2;

    @BindView(R.id.image_from)
    ImageView imageFrom;
    @BindView(R.id.image_to)
    ImageView imageTo;
    @BindView(R.id.transfer_amount)
    EditText transferAmount;
    @BindView(R.id.funds_password)
    EditText fundsPassword;
    @BindView(R.id.btn_submit)
    Button btnSubmit;
    @BindView(R.id.from_funds)
    TextView fromFunds;
    @BindView(R.id.to_funds)
    TextView toFunds;
    @BindView(R.id.text_from)
    TextView textFrom;
    @BindView(R.id.text_to)
    TextView textTo;

    private BubblePopupWindow adapterPopupWindow;

    private TranMoney tranMoney;
    private int positionFrom = 0;
    private int positionTo = 3;//ga
    private boolean status = false;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
    {
        View view=null;
        if(getArguments()!=null&&getArguments().getSerializable("hasTitle")!=null){
                    view=inflateView(inflater, container, "资金转移",  R.layout.fragment_transfer_platform);
        }else{
             view = inflater.inflate(R.layout.fragment_transfer_platform, container, false);
        }

        ButterKnife.bind(this, view);
        return view;
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        View rootView = LayoutInflater.from(getContext()).inflate(R.layout.customized_tips, null);
        BubbleLinearLayout bubbleView = (BubbleLinearLayout) rootView.findViewById(R.id.popup_bubble);
        adapterPopupWindow = new BubblePopupWindow(rootView, bubbleView);

        TransferAdapter adapter = new TransferAdapter(getContext(), ConstantInformation.getTransferArray());
        adapter.setOnIssueNoClickListener((Platform platform) -> {
            if (status) {
                positionFrom = platform.getId();
                route(platform.getId(), fromFunds);
                textFrom.setText(platform.getName());
            } else {
                positionTo = platform.getId();
                route(platform.getId(), toFunds);
                textTo.setText(platform.getName());
            }
            adapterPopupWindow.dismiss();
        });
        ListView issuenoList = (ListView) rootView.findViewById(R.id.issueNoList);
        issuenoList.setAdapter(adapter);
    }

    private void init(){
        if(ConstantInformation.getTransferArray().size()>=2){
            Platform from=getPlatformById(positionFrom);
            fromFunds.setText(route(from.getId()));
            textFrom.setText(from.getName());
            Platform to=getPlatformById(positionTo);
            toFunds.setText(route(to.getId()));
            textTo.setText(to.getName());
        }else{
            CustomDialog.Builder builder = new CustomDialog.Builder(getContext());
            builder.setMessage("资金转移平台不足!");
            builder.setTitle("温馨提示");
            builder.setLayoutSet(DialogLayout.SINGLE);
            builder.setPositiveButton("知道了", (dialog, which) -> {
                dialog.dismiss();
                getActivity().finish();
            });
            builder.create().show();
        }
    }

    private Platform getPlatformById(int  id){
        List<Platform>  list=ConstantInformation.getTransferArray();
        for(int i=0;i<list.size();i++){
            Platform  platform=list.get(i);
            if(platform.getId()==id){
                return platform;
            }
        }
        return  list.get(0);
    }

    @OnClick({R.id.image_from, R.id.image_to})
    public void selectDonw(View v) {
        switch (v.getId()) {
            case R.id.image_from:
                status = true;
                break;
            case R.id.image_to:
                status = false;
                break;
        }
        adapterPopupWindow.showArrowTo(v, BubbleStyle.ArrowDirection.Up);
    }

    private void route(int route, TextView text) {
        if (tranMoney != null) {
            switch (route) {
                case 0:
                    text.setText(tranMoney.getJyzBalance());
                    break;
               case 1:
                    text.setText(tranMoney.getPtBalance());
                    break;
                /*case 2:
                    text.setText(tranMoney.getJcBalance());
                    break;*/
                case 3:
                    text.setText(tranMoney.getGaBalance());
                    break;
                case 4:
                    text.setText(tranMoney.getSbBalance());
                    break;
                case 6:
                    text.setText( tranMoney.getMgBalance());
                    break;
                case 7:
                    text.setText( tranMoney.getBbinBalance());
                    break;

            }
        }
    }

    private String route(int route) {
        String platMoney="0";
        if (tranMoney != null) {
            switch (route) {
                case 0:
                    platMoney=tranMoney.getJyzBalance();
                    break;
                case 1:
                    platMoney=tranMoney.getPtBalance();
                    break;
              /*  case 2:
                    text.setText(tranMoney.getJcBalance());
                    break;*/
                case 3:
                    platMoney=tranMoney.getGaBalance();
                    break;
                case 4:
                    platMoney=tranMoney.getSbBalance();
                    break;
      /*          case 5:
                    platMoney=tranMoney.getAgBalance();*/
                case 6:
                    platMoney= tranMoney.getMgBalance();
                    break;
                case 7:
                    platMoney= tranMoney.getBbinBalance();
                    break;
            }
        }
        return platMoney;
    }

    private void tranMoneyLoad() {
        TransferRouteCommand routeCommand = new TransferRouteCommand();
        TypeToken typeToken = new TypeToken<RestResponse<TranMoney>>() {
        };
        RestRequest restRequest = RestRequestManager.createRequest(getActivity(), routeCommand, typeToken, restCallback, TRACE_TRANSFER_ROUTE, this);
        RestResponse restResponse = restRequest.getCache();
        if (restResponse != null && restResponse.getData() instanceof TranMoney) {
            tranMoney = (TranMoney) restResponse.getData();
        }
        restRequest.execute();

//        executeCommand(routeCommand, restCallback, TRACE_TRANSFER_ROUTE);
    }

    @OnClick(R.id.btn_submit)
    public void btnSubmit() {

        if (TextUtils.isEmpty(transferAmount.getText())) {
            showToast("请输入转移金额", Toast.LENGTH_SHORT);
            return;
        }
        if (TextUtils.isEmpty(fundsPassword.getText())) {
            showToast("请输入资金密码", Toast.LENGTH_SHORT);
            return;
        }

        String pFundsPassword = fundsPassword.getText().toString();
        if (pFundsPassword.length() < 6) {
            showToast("资金密码太短，请重新输入", Toast.LENGTH_SHORT);
            return;
        }
        if (pFundsPassword.length() > 20) {
            showToast("资金密码太长，请重新输入", Toast.LENGTH_SHORT);
            return;
        }
        String regex = "^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,20}$";
        if (!pFundsPassword.matches(regex)) {
            showToast("资金密码必须包含数字和字母，请重新输入", Toast.LENGTH_SHORT);
            return;
        }
        //第五个接口 平台转账  ?c=fin&a=tranMoney&op=tran ，2次md5后提交资金密码，依然在提交前判断有效性
        pFundsPassword= DigestUtils.md5Hex(pFundsPassword);
        pFundsPassword=DigestUtils.md5Hex(pFundsPassword);

        if ((positionFrom == 3&&positionTo==4)
                ||(positionFrom == 4&&positionTo==3)) {
            showToast("您所选择的项目不可以互转");
            return;
        }

        if (positionFrom == positionTo) {
            showToast("资金转移平台不能相同");
            return;
        }


        double drawMoney = Double.parseDouble(transferAmount.getText().toString());
        if (drawMoney < 10) {
            Toast.makeText(getActivity(), "转移金额不能小于10元", Toast.LENGTH_SHORT).show();
            return;
        }
        if (verify(drawMoney)) {
            Toast.makeText(getActivity(), "转移金额不能大于" + outPlatform() + "元", Toast.LENGTH_SHORT).show();
            return;
        }

        if (positionFrom == positionTo) {
            Toast.makeText(getActivity(), "转移金额平台不能相同", Toast.LENGTH_SHORT).show();
            return;
        }
        btnSubmit.setEnabled(false);
        TransferFundsCommand fundsCommand = new TransferFundsCommand();
        fundsCommand.setTranFrom(positionFrom);
        fundsCommand.setTranTo(positionTo);
        fundsCommand.setTranAmount(drawMoney);
        fundsCommand.setTranPass(pFundsPassword);
        executeCommand(fundsCommand, restCallback, TRACE_TRANSFER_SUBMIT);
    }

    private boolean verify(double drawMoney) {
        if (tranMoney != null) {
            switch (positionFrom) {
                case 0:
                    if (NumbericUtils.isNumeric(tranMoney.getJyzBalance())) {
                        if (drawMoney > Double.parseDouble(tranMoney.getJyzBalance())) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                case 1:
                    if (NumbericUtils.isNumeric(tranMoney.getPtBalance())) {
                        if (drawMoney > Double.parseDouble(tranMoney.getPtBalance())) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                case 2:
                    if (NumbericUtils.isNumeric(tranMoney.getJcBalance())) {
                        if (drawMoney > Double.parseDouble(tranMoney.getJcBalance())) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                case 3:
                    if (NumbericUtils.isNumeric(tranMoney.getGaBalance())) {
                        if (drawMoney > Double.parseDouble(tranMoney.getGaBalance())) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                case 4:
                    if (NumbericUtils.isNumeric(tranMoney.getSbBalance())) {
                        if (drawMoney > Double.parseDouble(tranMoney.getSbBalance())) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                case 6:
                    if (NumbericUtils.isNumeric(tranMoney.getMgBalance())) {
                        if (drawMoney > Double.parseDouble(tranMoney.getMgBalance())) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                case 7:
                    if (NumbericUtils.isNumeric(tranMoney.getBbinBalance())) {
                        if (drawMoney > Double.parseDouble(tranMoney.getBbinBalance())) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
            }
        }
        return false;
    }

    private String outPlatform() {
        if (tranMoney != null) {
            switch (positionFrom) {
                case 0:
                    return tranMoney.getJyzBalance();
                case 1:
                    return tranMoney.getPtBalance();
                case 2:
                    return tranMoney.getJcBalance();
                case 3:
                    return tranMoney.getGaBalance();
                case 4:
                    return tranMoney.getSbBalance();
              /*  case 5:
                    return tranMoney.getAgBalance();*/
                case 6:
                    return tranMoney.getMgBalance();
                case 7:
                    return tranMoney.getBbinBalance();
            }
        }
        return "";
    }

    private RestCallback restCallback = new RestCallback() {
        @Override
        public boolean onRestComplete(RestRequest request, RestResponse response) {
            switch (request.getId()) {
                case TRACE_TRANSFER_ROUTE:
                    if (response != null && response.getData() instanceof TranMoney) {
                        tranMoney = (TranMoney) response.getData();
                        init();
                        transferAmount.setText("");
                        fundsPassword.setText("");

                    }
                    break;
                case TRACE_TRANSFER_SUBMIT:
                    showToast(response.getErrStr());
                    tranMoneyLoad();
                    break;
            }
            return true;
        }

        @Override
        public boolean onRestError(RestRequest request, int errCode, String errDesc) {
            if (errCode == 7003) {
                Toast.makeText(getActivity(), "正在更新服务器请稍等", Toast.LENGTH_LONG).show();
                return true;
            } else if (errCode == 7006) {
                CustomDialog dialog = PromptManager.showCustomDialog(getActivity(), "重新登录", errDesc, "重新登录", errCode);
                dialog.setCancelable(false);
                dialog.show();
                return true;
            }
            return false;
        }

        @Override
        public void onRestStateChanged(RestRequest request, @RestRequest.RestState int state) {
            if (state == RestRequest.RUNNING) {
                if (request.getId() == TRACE_TRANSFER_ROUTE) {
                    showProgress("正在加载平台……");
                }
            } else {
                btnSubmit.setEnabled(true);
                hideWaitProgress();
            }
        }
    };

    @Override
    public void onResume() {
        super.onResume();
        tranMoneyLoad();
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
    }
}
